# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release
  SFML_VERSION: '3.0.1'
  LIBCONFIG_VERSION: '1.8.1'
  CMAKE_BUILD_PARALLEL_LEVEL: ${{ github.event.inputs.parallel_jobs || '4' }}

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build-configuration: [ Debug, Release ]

    steps:
      - name: ‚§µÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: ‚öôÔ∏è Install libsfml-dev and clang-17
        run: |
          sudo apt-get update
          sudo apt-get -y install libsfml-dev clang-17

      - name: ‚öôÔ∏è Setup libconfig
        id: libconfig
        uses: ./.github/actions/setup-libconfig
        with:
          version: ${{env.LIBCONFIG_VERSION}}

      - name: ‚öôÔ∏è Setup SFML
        id: sfml
        uses: ./.github/actions/setup-sfml
        with:
          version: ${{env.SFML_VERSION}}
          cache: 'true'
          parallel-jobs: ${{env.CMAKE_BUILD_PARALLEL_LEVEL}}

      - name: üñ•Ô∏è Display SFML info
        run: |
          echo "SFML installed in: ${{ steps.sfml.outputs.sfml-root }}"
          echo "Cache hit: ${{ steps.sfml.outputs.cache-hit }}"
          echo "SFML_ROOT env var: $SFML_ROOT"

      - name: üß± Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build-configuration}} -G Ninja

      - name: üõ†Ô∏è Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build-configuration}}

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

